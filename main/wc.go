package main

import (
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"

	"github.com/ven1xus/mit6824/mapreduce"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {

	kvs := make(map[string]int)
	strs := strings.Split(contents, " ")

	reg, err := regexp.Compile("[^a-zA-Z]")

	if err != nil {
		log.Fatalf("Error compiling regex: %v", err)
	}

	for _, str := range strs {
		procstr := strings.ToLower(reg.ReplaceAllString(str, ""))
		if procstr != "" {
			kvs[procstr]++
		}
	}

	return kvMapper(kvs)
}

func kvMapper(kv map[string]int) (kvs []mapreduce.KeyValue) {
	for k, v := range kv {
		mappedVal := mapreduce.KeyValue{k, strconv.Itoa(v)}
		kvs = append(kvs, mappedVal)
	}
	return
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	var c int

	for _, val := range values {
		i, err := strconv.Atoi(val)
		if err != nil {
			log.Printf("Could not convert str %v to integer: %v", val, err)
		}
		c += i
	}
	if key == "that" {
		log.Printf("that: %v\n", c)
	}
	return strconv.Itoa(c)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
